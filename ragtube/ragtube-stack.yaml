AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to create an SQS queue and an S3 bucket'

Resources:
  IngestQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 70
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt IngestDeadLetterQueue.Arn
        maxReceiveCount: 5

  IngestDeadLetterQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600

  VideoBucket:
    Type: 'AWS::S3::Bucket'

  ArtifactBucket:
    Type: 'AWS::S3::Bucket'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3MultipartUploadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:CreateMultipartUpload
                  - s3:PutObject
                  - s3:UploadPart
                  - s3:CompleteMultipartUpload
                  - s3:AbortMultipartUpload
                Resource: !Sub 'arn:aws:s3:::${VideoBucket}/*'

  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: "VideolexUserPool"
      AutoVerifiedAttributes:
        - "email"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: "email"
          AttributeDataType: "String"
          Mutable: true
          Required: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: "verified_email"
            Priority: 1
      EmailVerificationMessage: "Your verification code is {####}"
      EmailVerificationSubject: "Your verification code"

  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: "VideolexUserPoolClient"
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - "ALLOW_USER_PASSWORD_AUTH"
        - "ALLOW_REFRESH_TOKEN_AUTH"
      SupportedIdentityProviders:
        - COGNITO
        - Google
      CallbackURLs:
        - "http://localhost:3000/"
      LogoutURLs:
        - "http://localhost:3000/"
      AllowedOAuthFlows:
        - "code"
      AllowedOAuthScopes:
        - "email"
        - "openid"
        - "profile"
      AllowedOAuthFlowsUserPoolClient: true

  CognitoIdentityProviderGoogle:
    Type: "AWS::Cognito::UserPoolIdentityProvider"
    Properties:
      ProviderName: "Google"
      ProviderType: "Google"
      UserPoolId: !Ref CognitoUserPool
      ProviderDetails:
        client_id: "657575076082-d0p9ep35b5pdhtca49bquergcfpjfqoh.apps.googleusercontent.com"
        client_secret: "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"
        authorize_scopes: "openid email profile"

Outputs:
  QueueURL:
    Description: 'URL of the SQS Queue'
    Value: !Ref IngestQueue
  QueueARN:
    Description: 'ARN of the SQS Queue'
    Value: !GetAtt IngestQueue.Arn
  VideoBucketName:
    Description: 'Name of the S3 Bucket'
    Value: !Ref VideoBucket
  ArtifactBucketName:
    Description: 'Name of the S3 Bucket'
    Value: !Ref ArtifactBucket
  LambdaExecutionRoleARN:
    Description: 'ARN of the Lambda Execution IAM Role'
    Value: !GetAtt LambdaExecutionRole.Arn
  DeadLetterQueueURL:
    Description: 'URL of the Dead Letter Queue'
    Value: !Ref IngestDeadLetterQueue
  UserPoolId:
    Description: "The ID of the Cognito User Pool"
    Value: !Ref CognitoUserPool
    Export:
      Name: "CognitoUserPoolId"
  UserPoolClientId:
    Description: "The Client ID of the Cognito User Pool Client"
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: "CognitoUserPoolClientId"